// Code generated by proto-gen-go-kratos-selector. DO NOT EDIT.
// versions:
// proto-gen-go-kratos-selector v1.0
// url:
// https://gitee.com/pengdacn/protoc-gen-go-kratos-selector

package v1

import (
	context "context"
	middleware "github.com/go-kratos/kratos/v2/middleware"
	selector "github.com/go-kratos/kratos/v2/middleware/selector"
)

type standardSelectorMiddleware struct {
	id_jwt                map[string]struct{}
	middlewares_jwt       []middleware.Middleware
	id_privilege          map[string]struct{}
	middlewares_privilege []middleware.Middleware
}

type SelectorMiddleware interface {
	Build() middleware.Middleware
	Add_jwt(mlds ...middleware.Middleware)
	Add_privilege(mlds ...middleware.Middleware)
}

var (
	Selector_Jwt       = make(map[string]struct{})
	Selector_Privilege = make(map[string]struct{})

	_ SelectorMiddleware = (*standardSelectorMiddleware)(nil)
)

func init() {
	Selector_Jwt[`/api.user.v1.User/Add`] = struct{}{}
	Selector_Jwt[`/api.user.v1.User/GetSelf`] = struct{}{}
	Selector_Jwt[`/api.user.v1.User/List`] = struct{}{}
	Selector_Jwt[`/api.user.v1.User/Remove`] = struct{}{}
	Selector_Jwt[`/api.user.v1.User/Update`] = struct{}{}
	Selector_Privilege[`/api.user.v1.User/Add`] = struct{}{}
	Selector_Privilege[`/api.user.v1.User/List`] = struct{}{}
	Selector_Privilege[`/api.user.v1.User/Remove`] = struct{}{}
	Selector_Privilege[`/api.user.v1.User/Update`] = struct{}{}
}

func NewSelectorMiddleware() SelectorMiddleware {
	return &standardSelectorMiddleware{
		id_jwt:       Selector_Jwt,
		id_privilege: Selector_Privilege,
	}
}

func (s *standardSelectorMiddleware) Build() middleware.Middleware {
	var selectors []middleware.Middleware
	selectors = append(
		selectors,
		selector.Server(
			middleware.Chain(s.middlewares_jwt...),
		).
			Match(s.match_jwt()).
			Build(),
	)
	selectors = append(
		selectors,
		selector.Server(
			middleware.Chain(s.middlewares_privilege...),
		).
			Match(s.match_privilege()).
			Build(),
	)

	return middleware.Chain(selectors...)
}
func (s *standardSelectorMiddleware) Add_jwt(mlds ...middleware.Middleware) {
	if len(mlds) != 0 {
		s.middlewares_jwt = append(s.middlewares_jwt, mlds...)
	}
}

func (s *standardSelectorMiddleware) match_jwt() selector.MatchFunc {
	return func(ctx context.Context, operation string) bool {
		_, ok := Selector_Jwt[operation]

		return ok
	}
}
func (s *standardSelectorMiddleware) Add_privilege(mlds ...middleware.Middleware) {
	if len(mlds) != 0 {
		s.middlewares_privilege = append(s.middlewares_privilege, mlds...)
	}
}

func (s *standardSelectorMiddleware) match_privilege() selector.MatchFunc {
	return func(ctx context.Context, operation string) bool {
		_, ok := Selector_Privilege[operation]

		return ok
	}
}
