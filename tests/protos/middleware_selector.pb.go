// Code generated by proto-gen-go-kratos-selector. DO NOT EDIT.
// versions:
// proto-gen-go-kratos-selector v1.0
// url: https://gitee.com/pengdacn/protoc-gen-go-kratos-selector

package v1

import (
	context "context"
	middleware "github.com/go-kratos/kratos/v2/middleware"
	selector "github.com/go-kratos/kratos/v2/middleware/selector"
)

type standardSelectorTest struct {
	id_jwt          map[string]struct{}
	middlewares_jwt []middleware.Middleware
}

type SelectorTest interface {
	Build() middleware.Middleware
	Add_jwt(mld middleware.Middleware)
}

var (
	Selector_Jwt = make(map[string]struct{})

	_ SelectorTest = (*standardSelectorTest)(nil)
)

func init() {
	Selector_Jwt[`/cart.service.v1.Cart/AddItem`] = struct{}{}
	Selector_Jwt[`/cart.service.v1.Cart/DeleteCart`] = struct{}{}
	Selector_Jwt[`/cart.service.v1.Cart/DeleteItem`] = struct{}{}
	Selector_Jwt[`/cart.service.v1.Cart/GetCart`] = struct{}{}
	Selector_Jwt[`/cart.service.v1.Cart/UpdateItem`] = struct{}{}
}

func NewSelectorTest() SelectorTest {
	return &standardSelectorTest{
		id_jwt: Selector_Jwt,
	}
}

func (s *standardSelectorTest) Build() middleware.Middleware {
	var selectors []middleware.Middleware
	selectors = append(
		selectors,
		selector.Server(
			middleware.Chain(s.middlewares_jwt...),
		).
			Match(s.match_jwt()).
			Build(),
	)

	return middleware.Chain(selectors...)
}
func (s *standardSelectorTest) Add_jwt(mld middleware.Middleware) {
	s.middlewares_jwt = append(s.middlewares_jwt, mld)
}

func (s *standardSelectorTest) match_jwt() selector.MatchFunc {
	return func(ctx context.Context, operation string) bool {
		_, ok := Selector_Jwt[operation]

		return ok
	}
}
